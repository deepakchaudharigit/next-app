PS C:\Users\shaik\OneDrive\Documents\GitHub\next-app> npm run test               

> npcl-dashboard@1.0.0 test
> jest


 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts
 PASS  __tests__/lib/auth.test.ts

 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts
 FAIL  __tests__/api/auth/users.test.ts

 RUNS  __tests__/api/auth/register.test.ts
  ● /api/auth/users › GET /api/auth/users › should deny access for non-admin users

    expect(received).rejects.toThrow()

    Received promise resolved instead of rejected
    Resolved to value: {"body": "{\"success\":true,\"message\":\"Users fetched successfully\",\"data\":[{\"id\":\"user1\",\"name\":\"User 1\",\"email\":\"user1@example.com\",\"role\":\"ADMIN\",\"createdAt\":\"2024-01-01T00:00:00.000Z\",\"updatedAt\":\"2024-01-01T00:00:00.000Z\",\"_count\":{\"auditLogs\":5,\"reports\":2}},{\"id\":\"user2\",\"name\":\"User 2\",\"email\":\"user2@example.com\",\"role\":\"VIEWER\",\"createdAt\":\"2024-01-02T00:00:00.000Z\",\"updatedAt\":\"2024-01-02T00:00:00.000Z\",\"_count\":{\"auditLogs\":1,\"reports\":0}}]}", "headers": Map {"content-type" => "application/json"}, "status": 200, "statusText": "OK"}

      152 |       const req = new NextRequest('http://localhost:3000/api/auth/users')
      153 |
    > 154 |       await expect(GET(req)).rejects.toThrow('Admin access required')
          |             ^
      155 |     })
      156 |
      157 |     it('should handle database errors gracefully', async () => {

      at expect (node_modules/expect/build/index.js:113:15)
      at Object.expect (__tests__/api/auth/users.test.ts:154:13)


 RUNS  __tests__/api/auth/register.test.ts
 FAIL  __tests__/api/auth/nextauth.test.ts

 RUNS  __tests__/api/auth/register.test.ts
  ● NextAuth Configuration › Credentials Provider › should authorize valid credentials

    expect(received).toEqual(expected) // deep equality

    Expected: {"email": "test@example.com", "id": "user123", "name": "Test User", "role": "ADMIN"}
    Received: null

      170 |       )
      171 |
    > 172 |       expect(result).toEqual({
          |                      ^
      173 |         id: 'user123',
      174 |         name: 'Test User',
      175 |         email: 'test@example.com',

      at Object.toEqual (__tests__/api/auth/nextauth.test.ts:172:22)


 RUNS  __tests__/api/auth/register.test.ts
 FAIL  __tests__/utils/test-helpers.test.ts

 RUNS  __tests__/api/auth/register.test.ts
  ● Test Helpers › should create mock session with correct structure

    expect(received).toEqual(expected) // deep equality

    - Expected  - 0
    + Received  + 1

      Object {
        "email": "test@example.com",
        "id": "test-id",
    +   "name": "test",
        "role": "VIEWER",
      }

      46 |     expect(session).toHaveProperty("user");
      47 |     expect(session).toHaveProperty("expires");
    > 48 |     expect(session.user).toEqual(user);
         |                          ^
      49 |     expect(typeof session.expires).toBe("string");
      50 |   });
      51 |

      at Object.toEqual (__tests__/utils/test-helpers.test.ts:48:26)


 RUNS  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts
 FAIL  __tests__/api/auth/register.test.ts

 RUNS  __tests__/api/auth/register.test.ts
  ● POST /api/auth/register › registers a new user successfully

    expect(received).toEqual(expected) // deep equality

    - Expected  - 2
    + Received  + 2

      Object {
    -   "createdAt": 2024-01-01T00:00:00.000Z,
    +   "createdAt": "2024-01-01T00:00:00.000Z",
        "email": "john@example.com",
        "id": "user-1",
        "isDeleted": false,
        "name": "John Doe",
        "password": "password123",
        "role": "VIEWER",
    -   "updatedAt": 2024-01-01T00:00:00.000Z,
    +   "updatedAt": "2024-01-01T00:00:00.000Z",
      }

      100 |       },
      101 |     })
    > 102 |     expect(data.data).toEqual(newUser)
          |                       ^
      103 |     expect(data.message).toBe('User created successfully')
      104 |   })
      105 |

      at Object.toEqual (__tests__/api/auth/register.test.ts:102:23)

  ● POST /api/auth/register › should trim whitespace from inputs

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 400

      128 |   expectedStatus: number
      129 | ): Promise<Record<string, unknown>> => {
    > 130 |   expect(response.status).toBe(expectedStatus);
          |                           ^
      131 |   const data = await response.json();
      132 |   return data as Record<string, unknown>;
      133 | };

      at toBe (__tests__/utils/test-helpers.utils.ts:130:27)
      at expectJsonResponse (__tests__/utils/test-helpers.utils.ts:139:22)
      at Object.<anonymous> (__tests__/api/auth/register.test.ts:296:32)

  ● POST /api/auth/register › should handle case-insensitive email match

    expect(jest.fn()).toHaveBeenCalledWith(...expected)

    - Expected
    + Received

      Object {
    +   "select": Object {
    +     "id": true,
    +   },
        "where": Object {
          "email": "john@example.com",
        },
      },

    Number of calls: 1

      324 |
      325 |     // Verify the lookup was done with lowercase email
    > 326 |     expect(mockPrismaUserFindUnique).toHaveBeenCalledWith({
          |                                      ^
      327 |       where: { email: 'john@example.com' },
      328 |     })
      329 |   })

      at Object.toHaveBeenCalledWith (__tests__/api/auth/register.test.ts:326:38)

  ● POST /api/auth/register › should not expose sensitive data in response

    expect(received).not.toHaveProperty(path)

    Expected path: not "password"

    Received value: "$2a$12$hashedpassword"

      341 |     const data = await expectSuccessResponse(res)
      342 |
    > 343 |     expect(data.data).not.toHaveProperty('password')
          |                           ^
      344 |     expect(data.data).not.toHaveProperty('resetToken')
      345 |     expect(data.data).not.toHaveProperty('resetTokenExpiry')
      346 |   })

      at Object.toHaveProperty (__tests__/api/auth/register.test.ts:343:27)


 RUNS  __tests__/api/auth/register.test.ts
 PASS  __tests__/lib/auth-enhanced.test.ts

 RUNS  __tests__/api/auth/register.test.ts

 PASS  __tests__/lib/validations.test.ts

 PASS  __tests__/lib/rbac.test.ts

 PASS  __tests__/api/auth/test-session.test.ts
  ● Console

    console.error
      Test session error: Session error

      45 |     })
      46 |   } catch (error: unknown) {
    > 47 |     console.error('Test session error:', error instanceof Error ? error.message : 'Unknown error')
         |             ^
      48 |     return NextResponse.json(
      49 |       { 
      50 |         success: false, 

      at error (app/api/auth/test-session/route.ts:47:13)
      at Object.<anonymous> (__tests__/api/auth/test-session.test.ts:93:22)

 PASS  __tests__/middleware.test.ts
 PASS  __tests__/test-fixes.test.ts                                                                                                                                   
  ● Console

    console.error
      Authentication error: Error: Database connection failed
          at Object.<anonymous> (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\__tests__\test-fixes.test.ts:264:48)
          at Promise.then.completed (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\utils.js:298:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\utils.js:231:10)
          at _callCircusTest (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\run.js:316:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\run.js:252:3)
          at _runTestsForDescribeBlock (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\run.js:126:9)
          at _runTestsForDescribeBlock (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\run.js:121:9)
          at run (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\run.js:71:3)
          at runAndTransformResultsToJestFormat (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
          at jestAdapter (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
          at runTestInternal (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-runner\build\runTest.js:367:16)
          at runTest (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-runner\build\runTest.js:444:34)
          at Object.worker (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\node_modules\jest-runner\build\testWorker.js:106:12)

      46 |     return user
      47 |   } catch (error: unknown) {
    > 48 |     console.error('Authentication error:', error)
         |             ^
      49 |     if (isDatabaseError(error)) throw new DatabaseError('Database connection failed')
      50 |     return null
      51 |   }

      at error (lib/auth-utils.ts:48:13)
      at requireAuth (middleware/authMiddleware.ts:29:18)
      at Object.<anonymous> (__tests__/test-fixes.test.ts:266:32)

    console.error
      Authentication error: DatabaseError: Database connection failed
          at getAuthenticatedUser (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\lib\auth-utils.ts:49:39)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at requireAuth (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\middleware\authMiddleware.ts:29:18)
          at Object.<anonymous> (C:\Users\shaik\OneDrive\Documents\GitHub\next-app\__tests__\test-fixes.test.ts:266:32)

      41 |     return { user, response: null }
      42 |   } catch (error) {
    > 43 |     console.error('Authentication error:', error)
         |             ^
      44 |     return {
      45 |       user: null,
      46 |       response: NextResponse.json(

      at error (middleware/authMiddleware.ts:43:13)
      at Object.<anonymous> (__tests__/test-fixes.test.ts:266:32)

 PASS  __tests__/auth.test.ts

Test Suites: 4 failed, 8 passed, 12 total
Tests:       7 failed, 129 passed, 136 total
Snapshots:   0 total
Time:        5.945 s
Ran all test suites.