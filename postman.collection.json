{
	"info": {
		"_postman_id": "b10fc905-f937-4e93-b8b7-2910082cb55b",
		"name": "NPCL Dashboard APIs",
		"description": "Comprehensive API collection for NPCL Dashboard - A power management system with role-based authentication, voicebot call tracking, and dashboard analytics.\n\n## Authentication\nThis API uses Auth.js (NextAuth.js) built-in endpoints with their standard formats:\n\n### Auth.js Built-in API Endpoints\n- **Sign In**: POST /api/auth/signin/credentials - Auth.js credentials sign-in\n- **Sign Out**: POST /api/auth/signout - Auth.js sign-out\n- **Session**: GET /api/auth/session - Auth.js session information\n- **CSRF Token**: GET /api/auth/csrf - CSRF protection token\n- **Providers**: GET /api/auth/providers - Available auth providers\n\n### Auth.js Standard Request/Response Formats\n- All endpoints follow Auth.js standard formats\n- Proper JSON responses for API clients\n- CSRF protection for form-based requests\n- Secure session management with JWT\n\n## Base URL\nDevelopment: http://localhost:3000\nProduction: Set {{baseUrl}} variable accordingly\n\n## Test Accounts\n- Admin: admin@npcl.com / admin123\n- Operator: operator@npcl.com / operator123\n- Viewer: viewer@npcl.com / viewer123\n\n## Features\n- **Auth.js built-in authentication** with standard API endpoints\n- Enhanced password validation (8+ chars, uppercase, lowercase, number, special char)\n- Comprehensive user management endpoints\n- Voicebot call reporting with filtering and export\n- Health monitoring and system status\n- Audit logging for all user actions\n- Role-based access control (ADMIN, OPERATOR, VIEWER)\n- Secure JWT session management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45768621"
	},
	"item": [
		{
			"name": "Authentication (Auth.js Built-in)",
			"item": [
				{
					"name": "Sign In with Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 302\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
									"});",
									"",
									"// Auth.js signin returns different responses based on success/failure",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Successful signin response\", function () {",
									"        // Auth.js may return JSON or redirect",
									"        const contentType = pm.response.headers.get('Content-Type');",
									"        if (contentType && contentType.includes('application/json')) {",
									"            const jsonData = pm.response.json();",
									"            pm.expect(jsonData).to.have.property('url');",
									"        }",
									"    });",
									"} else if (pm.response.code === 302) {",
									"    pm.test(\"Redirect response for successful signin\", function () {",
									"        pm.expect(pm.response.headers.get('Location')).to.exist;",
									"    });",
									"}",
									"",
									"// Save session cookies if present",
									"const sessionCookie = pm.response.headers.get('Set-Cookie');",
									"if (sessionCookie) {",
									"    pm.globals.set('sessionCookie', sessionCookie);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "admin@npcl.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin123",
									"type": "text"
								},
								{
									"key": "callbackUrl",
									"value": "{{baseUrl}}/dashboard",
									"type": "text"
								},
								{
									"key": "json",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin/credentials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin",
								"credentials"
							]
						},
						"description": "Sign in using Auth.js built-in credentials provider. Uses standard Auth.js request format with form data."
					},
					"response": []
				},
				{
					"name": "Sign In with JSON",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auth.js signin response\", function () {",
									"    const jsonData = pm.response.json();",
									"    // Auth.js returns url on success, error on failure",
									"    pm.expect(jsonData).to.satisfy(function(data) {",
									"        return data.hasOwnProperty('url') || data.hasOwnProperty('error');",
									"    });",
									"});",
									"",
									"// Save session cookies if present",
									"const sessionCookie = pm.response.headers.get('Set-Cookie');",
									"if (sessionCookie) {",
									"    pm.globals.set('sessionCookie', sessionCookie);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@npcl.com\",\n  \"password\": \"admin123\",\n  \"callbackUrl\": \"{{baseUrl}}/dashboard\",\n  \"json\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signin/credentials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signin",
								"credentials"
							]
						},
						"description": "Sign in using Auth.js built-in credentials provider with JSON request format."
					},
					"response": []
				},
				{
					"name": "Get Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Auth.js session response format\", function () {",
									"    const jsonData = pm.response.json();",
									"    // Auth.js session endpoint returns user object if authenticated, null if not",
									"    if (jsonData.user) {",
									"        pm.expect(jsonData).to.have.property('user');",
									"        pm.expect(jsonData).to.have.property('expires');",
									"        pm.expect(jsonData.user).to.have.property('email');",
									"        pm.expect(jsonData.user).to.have.property('name');",
									"    } else {",
									"        pm.expect(jsonData).to.be.empty;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/session",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"session"
							]
						},
						"description": "Get current session using Auth.js built-in session endpoint. Returns user data if authenticated, empty object if not."
					},
					"response": []
				},
				{
					"name": "Sign Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 302\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Signout response\", function () {",
									"        const contentType = pm.response.headers.get('Content-Type');",
									"        if (contentType && contentType.includes('application/json')) {",
									"            const jsonData = pm.response.json();",
									"            pm.expect(jsonData).to.have.property('url');",
									"        }",
									"    });",
									"} else if (pm.response.code === 302) {",
									"    pm.test(\"Redirect after signout\", function () {",
									"        pm.expect(pm.response.headers.get('Location')).to.exist;",
									"    });",
									"}",
									"",
									"// Clear saved session cookies",
									"pm.globals.unset('sessionCookie');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "callbackUrl",
									"value": "{{baseUrl}}/auth/login",
									"type": "text"
								},
								{
									"key": "json",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/signout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"signout"
							]
						},
						"description": "Sign out using Auth.js built-in signout endpoint. Clears all session cookies and redirects."
					},
					"response": []
				},
				{
					"name": "Get CSRF Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"CSRF token returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('csrfToken');",
									"    pm.expect(jsonData.csrfToken).to.be.a('string');",
									"    pm.expect(jsonData.csrfToken.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Save CSRF token for form submissions",
									"const jsonData = pm.response.json();",
									"if (jsonData.csrfToken) {",
									"    pm.globals.set('csrfToken', jsonData.csrfToken);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/csrf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"csrf"
							]
						},
						"description": "Get CSRF token for Auth.js form-based authentication protection."
					},
					"response": []
				},
				{
					"name": "Get Auth Providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Providers returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData).to.have.property('credentials');",
									"    pm.expect(jsonData.credentials).to.have.property('name');",
									"    pm.expect(jsonData.credentials).to.have.property('type');",
									"    pm.expect(jsonData.credentials.type).to.equal('credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/providers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"providers"
							]
						},
						"description": "Get available authentication providers configured in Auth.js."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints using Auth.js built-in features with standard request/response formats. These are the actual Auth.js API endpoints that are automatically provided."
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile data is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.expect(jsonData.data._count).to.have.property('auditLogs');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Get current user's profile information including audit log and report counts."
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Profile updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('updated successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Name\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Update current user's profile information. Currently supports name updates only."
					},
					"response": []
				},
				{
					"name": "Delete User Profile",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						},
						"description": "Soft delete current user's account. Marks account as deleted and logs audit event."
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 401\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Users list returned\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.be.an('array');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users"
							]
						},
						"description": "Get list of all users with their statistics. Requires ADMIN role."
					},
					"response": []
				},
				{
					"name": "Create User (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 or 401 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 401, 409]);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    pm.test(\"User created successfully\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        pm.expect(jsonData.data).to.not.have.property('password');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"New User\",\n  \"email\": \"newuser@npcl.com\",\n  \"password\": \"SecurePass123!\",\n  \"confirmPassword\": \"SecurePass123!\",\n  \"role\": \"OPERATOR\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users"
							]
						},
						"description": "Create a new user account. Requires ADMIN role. Logs audit event. Password must meet security requirements."
					},
					"response": []
				},
				{
					"name": "Get User by ID (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Get specific user details by ID. Requires ADMIN role."
					},
					"response": []
				},
				{
					"name": "Update User (Admin)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated User Name\",\n  \"email\": \"updated@npcl.com\",\n  \"role\": \"OPERATOR\",\n  \"password\": \"NewPassword123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Update user information. Requires ADMIN role. Prevents admin from demoting themselves. Logs audit event."
					},
					"response": []
				},
				{
					"name": "Delete User (Admin)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"{{userId}}"
							]
						},
						"description": "Delete user account. Requires ADMIN role. Prevents admin from deleting themselves. Logs audit event."
					},
					"response": []
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 409\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 409]);",
									"});",
									"",
									"pm.test(\"Response has success field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"User created successfully\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.data).to.have.property('id');",
									"        pm.expect(jsonData.data).to.not.have.property('password');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@npcl.com\",\n  \"password\": \"SecurePass123!\",\n  \"confirmPassword\": \"SecurePass123!\",\n  \"role\": \"VIEWER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Password must meet security requirements (8+ chars, uppercase, lowercase, number, special char). Role defaults to VIEWER if not specified.\n\nAvailable roles: ADMIN, OPERATOR, VIEWER"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.message).to.include('password reset link');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@npcl.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"forgot-password"
							]
						},
						"description": "Request password reset email. Always returns success message to prevent email enumeration attacks."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"reset_token_from_email\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmPassword\": \"NewSecurePass123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							]
						},
						"description": "Reset password using token from email. Token expires after 1 hour. Password must meet security requirements."
					},
					"response": []
				},
				{
					"name": "Verify Reset Token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/reset-password?token=reset_token_from_email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"reset-password"
							],
							"query": [
								{
									"key": "token",
									"value": "reset_token_from_email",
									"description": "Reset token from email"
								}
							]
						},
						"description": "Verify if a password reset token is valid and not expired."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Password changed successfully\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData.success).to.be.true;",
									"        pm.expect(jsonData.message).to.include('Password changed successfully');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"CurrentPass123!\",\n  \"newPassword\": \"NewSecurePass123!\",\n  \"confirmNewPassword\": \"NewSecurePass123!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						},
						"description": "Change password for authenticated user. Requires current password verification. Logs audit event. New password must meet security requirements."
					},
					"response": []
				}
			],
			"description": "User management endpoints for profile and admin operations"
		},
		{
			"name": "Dashboard",
			"item": [
				{
					"name": "Get Dashboard Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Dashboard stats returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('totalUsers');",
									"    pm.expect(jsonData.data).to.have.property('totalReports');",
									"    pm.expect(jsonData.data).to.have.property('recentAuditLogs');",
									"    pm.expect(jsonData.data).to.have.property('voicebotCallsCount');",
									"    pm.expect(jsonData.data).to.have.property('recentActivity');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/dashboard/stats?timeRange=24h&includeOffline=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"dashboard",
								"stats"
							],
							"query": [
								{
									"key": "timeRange",
									"value": "24h",
									"description": "Time range: 1h, 24h, 7d, 30d"
								},
								{
									"key": "includeOffline",
									"value": "true",
									"description": "Include offline units in stats"
								}
							]
						},
						"description": "Get dashboard statistics including user counts, reports, audit logs, and voicebot calls. Supports time range filtering."
					},
					"response": []
				}
			],
			"description": "Dashboard analytics and statistics endpoints"
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Get Voicebot Calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Voicebot calls data returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.meta).to.have.property('page');",
									"    pm.expect(jsonData.meta).to.have.property('totalPages');",
									"    pm.expect(jsonData.meta).to.have.property('totalRecords');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/reports/voicebot-calls?page=1&limit=10&language=en&callResolutionStatus=resolved",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"reports",
								"voicebot-calls"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "Page number for pagination"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Number of records per page"
								},
								{
									"key": "language",
									"value": "en",
									"description": "Filter by language"
								},
								{
									"key": "cli",
									"value": "",
									"description": "Filter by CLI number",
									"disabled": true
								},
								{
									"key": "callResolutionStatus",
									"value": "resolved",
									"description": "Filter by resolution status"
								},
								{
									"key": "durationMin",
									"value": "",
									"description": "Minimum call duration in seconds",
									"disabled": true
								},
								{
									"key": "durationMax",
									"value": "",
									"description": "Maximum call duration in seconds",
									"disabled": true
								},
								{
									"key": "dateFrom",
									"value": "",
									"description": "Start date (YYYY-MM-DD)",
									"disabled": true
								},
								{
									"key": "dateTo",
									"value": "",
									"description": "End date (YYYY-MM-DD)",
									"disabled": true
								}
							]
						},
						"description": "Get paginated list of voicebot calls with filtering options. Supports filtering by language, CLI, status, duration, and date range."
					},
					"response": []
				}
			],
			"description": "Report generation and data export endpoints for voicebot calls"
		},
		{
			"name": "System",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 503\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 503]);",
									"});",
									"",
									"pm.test(\"Health status returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('uptime');",
									"    pm.expect(jsonData).to.have.property('checks');",
									"    pm.expect(jsonData.checks).to.have.property('database');",
									"    pm.expect(jsonData.checks).to.have.property('memory');",
									"});",
									"",
									"pm.test(\"Database check included\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.checks.database).to.have.property('status');",
									"    pm.expect(['up', 'down']).to.include(jsonData.checks.database.status);",
									"});",
									"",
									"pm.test(\"Memory usage included\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.checks.memory).to.have.property('used');",
									"    pm.expect(jsonData.checks.memory).to.have.property('total');",
									"    pm.expect(jsonData.checks.memory).to.have.property('percentage');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Comprehensive health check including database connectivity, memory usage, and system status."
					},
					"response": []
				}
			],
			"description": "System monitoring and documentation endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set common headers",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'NPCL-Dashboard-API-Client/1.0'",
					"});",
					"",
					"// Set timestamp for debugging",
					"pm.globals.set('requestTimestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test for JSON response",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Response is valid JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"}",
					"",
					"// Global test for common error structure",
					"if (pm.response.code >= 400 && pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Error response has proper structure', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('success');",
					"        pm.expect(jsonData.success).to.be.false;",
					"        pm.expect(jsonData).to.have.property('message');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"description": "User ID for testing user management endpoints",
			"type": "string"
		},
		{
			"key": "callId",
			"value": "1",
			"description": "Voicebot call ID for testing report endpoints",
			"type": "string"
		}
	]
}