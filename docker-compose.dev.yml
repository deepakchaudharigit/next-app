# Docker Compose Development Override
# This file extends docker-compose.yml for development environment

services:
  postgres:
    # Development-specific PostgreSQL configuration
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-npcl-auth-db-dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePassword2025!}
    ports:
      - "5432:5432"  # Keep same port for development consistency
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/db:/docker-entrypoint-initdb.d:ro

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: npcl-dashboard-dkch
    env_file: .env.docker
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-SecurePassword2025!}@postgres:5432/${POSTGRES_DB:-npcl-auth-db-dev}?schema=public
      - NEXTAUTH_URL=http://localhost:3000
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - DEBUG=${DEBUG:-false}
      - NPM_CONFIG_AUDIT=false
      - NPM_CONFIG_FUND=false
      - NPM_CONFIG_LOGLEVEL=warn
      - NODE_OPTIONS=--max-old-space-size=3072 --max-semi-space-size=256 --optimize-for-size
      - CHOKIDAR_USEPOLLING=false
      - CHOKIDAR_INTERVAL=1000
      - UV_THREADPOOL_SIZE=4
      # Prisma engine paths for Debian/glibc (auto-detected, but can be explicit)
      # - PRISMA_QUERY_ENGINE_LIBRARY=/app/node_modules/.prisma/client/libquery_engine-debian-openssl-1.1.x.so.node
      # - PRISMA_QUERY_ENGINE_BINARY=/app/node_modules/.prisma/client/query-engine-debian-openssl-1.1.x
      # Let Prisma auto-detect the correct engine for better compatibility
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    volumes:
      # Mount only essential directories to reduce memory usage
      - ./app:/app/app:ro
      - ./components:/app/components:ro
      - ./lib:/app/lib:ro
      - ./middleware:/app/middleware:ro
      - ./prisma:/app/prisma:ro
      - ./types:/app/types:ro
      - ./hooks:/app/hooks:ro
      - ./config:/app/config:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./next.config.js:/app/next.config.js:ro
      - ./tailwind.config.js:/app/tailwind.config.js:ro
      - ./postcss.config.js:/app/postcss.config.js:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./uploads:/app/uploads
      - dev_logs:/app/logs
      - dev_node_modules:/app/node_modules
      - dev_next:/app/.next
    # Use memory-optimized startup script
    command: ["/bin/bash", "-c", "chmod +x ./scripts/docker/startup-memory-optimized.sh && ./scripts/docker/startup-memory-optimized.sh || npm run dev"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Longer start period for development

  # Development-specific services
  adminer:
    image: adminer:latest
    container_name: npcl-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - npcl-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - dev-tools

  # Mailhog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: npcl-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - npcl-network
    profiles:
      - dev-tools

volumes:
  postgres_dev_data:
  dev_logs:
  dev_node_modules:
  dev_next: