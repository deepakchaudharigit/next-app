# NPCL Dashboard Docker Compose Configuration
# Main configuration file for production and development

# Set project name to avoid naming conflicts
name: npcl-dashboard

services:
  postgres:
    image: postgres:15-alpine
    container_name: npcl-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-npcl-auth-db-dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-SecurePassword2025!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - npcl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-npcl-auth-db-dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: npcl-dashboard:dev
    container_name: npcl-dashboard-app
    restart: unless-stopped
    env_file: .env.docker
    environment:
      # NextAuth Configuration - Critical for authentication
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Node Environment
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      # Development optimizations
      - WATCHPACK_POLLING=true
      - NODE_OPTIONS=--max-old-space-size=3072 --max-semi-space-size=256 --optimize-for-size
      - CHOKIDAR_USEPOLLING=false
      - CHOKIDAR_INTERVAL=1000
      - UV_THREADPOOL_SIZE=4
      # Database connection
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "3000:3000"
      - "5555:5555"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - npcl-network
    volumes:
      # Only mount essential directories to avoid memory issues
      - ./uploads:/app/uploads
      - app_logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: ["/bin/bash", "-c", "while ! pg_isready -h postgres -p 5432 -U postgres; do sleep 2; done && npx prisma generate && npx prisma db push && npm run dev"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: npcl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - npcl-network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  app_logs:

networks:
  npcl-network:
    driver: bridge